Sys.sleep(1)
}
for(i in 1:10) {
plot(exploration(mat, 1))
Sys.sleep(2)
}
pacman::p_load(googledrive, ggplot2, tidyverse, ggrepel, pheatmap, reshape2, manipulate)
workbooks <- drive_find()
print(workbooks)
sheet <- workbooks$id[9]
data <- drive_get(as_id(sheet))
drive_download(data, type="csv")
df <- read.csv('Protocols.csv', header=TRUE)
data <- df %>% mutate(vol=as.numeric(factor(VOLUMEN, levels=c("BAJO", "MEDIO", "ALTO"))),
int=as.numeric(factor(INTENSIDAD, levels=c("BAJO", "MEDIO", "ALTO"))))
View(data)
print(workbooks)
data <- drive_get(as_id('1GNAltxDkmVb4owjR2g01LWf9V1pBcdrleYrwyAzVTVs'))
drive_download(data, type="csv")
drive_download(data, type="csv", overwrite = TRUE)
df <- read.csv('Protocols.csv', header=TRUE)
data <- df %>% mutate(vol=as.numeric(factor(VOLUMEN, levels=c("BAJO", "MEDIO", "ALTO"))),
int=as.numeric(factor(INTENSIDAD, levels=c("BAJO", "MEDIO", "ALTO"))))
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point() +
geom_text_repel() +
theme(legend.position = "none")
mat <- matrix(0, 3, 3) + 1
meltMat <- melt(mat)
head(meltMat)
ggplot(data=meltMat, aes(x=Var2, y=Var1)) +
geom_raster(aes(fill=value))
gaussianMat <- matrix(rnorm(dim(data)[1] * dim(data)[2], mean=5, sd=1), dim(data)[1], dim(data)[2])
exploration <- function(x, extra){
g <- melt(matrix(rnorm(dim(x)[1] * dim(x)[2], mean=5, sd=10), dim(x)[1], dim(x)[2]))
f <- melt(x)
f$value <- g$value * f$value
p <- ggplot(data=f, aes(x=Var2, y=Var1)) +
geom_point(aes(size=value)) +
theme(legend.position = "none")
print(extra)
return(p)
}
for(i in 1:10) {
plot(exploration(mat, 1))
Sys.sleep(1)
}
data <- df %>% mutate(vol=as.numeric(factor(VOLUMEN, levels=c("BAJO", "MEDIO", "ALTO"))),
int=as.numeric(factor(INTENSIDAD, levels=c("BAJO", "MEDIO", "ALTO"))))
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point() +
geom_text_repel() +
theme(legend.position = "none")
pacman::p_load(googledrive, ggplot2, tidyverse, ggrepel, pheatmap, reshape2, manipulate)
workbooks <- drive_find()
for(i in 1:10) {
plot(exploration(mat, 1))
Sys.sleep(1)
}
mat <- matrix(0, 3, 3) + 1
meltMat <- melt(mat)
head(meltMat)
ggplot(data=meltMat, aes(x=Var2, y=Var1)) +
geom_raster(aes(fill=value))
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point() +
geom_text_repel() +
theme(legend.position = "none")
View(data)
rnorm(1, 1, 10, 10)
rnorm(1 * 1, 10, 10)
rnorm(1 * dim(data)[2], 10, 10)
rnorm(1 * dim(data)[1], 10, 10)
weights <- rnorm(1 * dim(data)[1], 10, 10)
data %>% bind_cols(weights)
workbooks <- drive_find()
print(workbooks)
data <- drive_get(as_id('1GNAltxDkmVb4owjR2g01LWf9V1pBcdrleYrwyAzVTVs'))
drive_download(data, type="csv", overwrite = TRUE)
df <- read.csv('Protocols.csv', header=TRUE)
weights <- rnorm(1 * dim(data)[1], 10, 10)
data <- df %>% mutate(vol=as.numeric(factor(VOLUMEN, levels=c("BAJO", "MEDIO", "ALTO"))),
int=as.numeric(factor(INTENSIDAD, levels=c("BAJO", "MEDIO", "ALTO"))))
data <- data %>% bind_cols(weights)
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO, size=weights)) +
geom_point() +
geom_text_repel() +
theme(legend.position = "none")
weights <- rnorm(1 * dim(data)[1], 10, 1000)
data <- df %>% mutate(vol=as.numeric(factor(VOLUMEN, levels=c("BAJO", "MEDIO", "ALTO"))),
int=as.numeric(factor(INTENSIDAD, levels=c("BAJO", "MEDIO", "ALTO"))))
data <- data %>% bind_cols(weights)
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO, size=weights)) +
geom_point() +
geom_text_repel() +
theme(legend.position = "none")
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(aes(size=weights)) +
geom_text_repel() +
theme(legend.position = "none")
weights <- rnorm(1 * dim(data)[1], 10, 100)
data <- df %>% mutate(vol=as.numeric(factor(VOLUMEN, levels=c("BAJO", "MEDIO", "ALTO"))),
int=as.numeric(factor(INTENSIDAD, levels=c("BAJO", "MEDIO", "ALTO"))))
data <- data %>% bind_cols(weights)
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(aes(size=weights)) +
geom_text_repel() +
theme(legend.position = "none")
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(aes(size=weights)) +
geom_text_repel() +
geom_jitter() +
theme(legend.position = "none")
weights <- rnorm(1 * dim(data)[1], 100, 100)
data <- df %>% mutate(vol=as.numeric(factor(VOLUMEN, levels=c("BAJO", "MEDIO", "ALTO"))),
int=as.numeric(factor(INTENSIDAD, levels=c("BAJO", "MEDIO", "ALTO"))))
data <- data %>% bind_cols(weights)
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(aes(size=weights)) +
geom_text_repel() +
geom_jitter() +
theme(legend.position = "none")
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(aes(size=weights)) +
geom_text_repel() +
geom_jitter(width=3) +
theme(legend.position = "none")
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(aes(size=weights)) +
geom_text_repel() +
geom_jitter(width=0.3) +
theme(legend.position = "none")
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(aes(size=weights), alpha=0.5) +
geom_text_repel() +
geom_jitter(width=0.3) +
theme(legend.position = "none")
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(aes(size=weights), alpha=1) +
geom_text_repel() +
geom_jitter(width=0.3) +
theme(legend.position = "none")
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(aes(size=weights), alpha=0.3) +
geom_text_repel() +
geom_jitter(width=0.3) +
theme(legend.position = "none")
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(alpha=0.3) +
geom_text_repel() +
geom_jitter(width=0.3) +
theme(legend.position = "none")
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(alpha=0.3) +
geom_text_repel() +
geom_jitter() +
theme(legend.position = "none")
ggplot(data, aes(x=vol, y=int, color=PROTOCOLO, label=PROTOCOLO)) +
geom_point(alpha=0.3) +
geom_text_repel() +
theme(legend.position = "none")
dist()
dist(data)
plot(dist(data))
plot(dist(data))
dist(data[, c(4, 5)])
plot(dist(data[, c(4, 5)]))
data[, c(1, 4, 5)]
dst <- dist(data[, c(1, 4, 5)],)
dst <- dist(data[, c(1, 4, 5)], )
dst <- data.matrix(dst)
View(dst)
dim <- ncol(dst)
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1, 4, 5)], cex.axis = 0.5, las=3)
axis(2, 1:dim, data[, c(1, 4, 5)], cex.axis = 0.5, las=1)
axis(1, 1:dim, data[, c(1)], cex.axis = 0.5, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.5, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
axis(1, 1:dim, data[, c(1)], cex.axis = 0.9, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.5, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.9, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.5, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.9, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.9, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
dst <- dist(data[, c(1, 4, 5)], )
dst <- data.matrix(dst)
dim <- ncol(dst)
par(mar=c(5.1,4.1,4.1,2.1))
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.9, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.9, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
dim <- ncol(dst)
par(mar=c(10,10,10,10))
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.9, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.9, las=1)
dim <- ncol(dst)
par(mar=c(10,10,10,10))
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.5, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.5, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
dim <- ncol(dst)
par(mar=c(5,5,5,5))
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.5, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.5, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
dim <- ncol(dst)
par(mar=c(7,7,7,7))
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.5, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.5, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
dim <- ncol(dst)
par(mar=c(9,9,9,9))
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.5, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.5, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
dim <- ncol(dst)
par(mar=c(9,9,0,9))
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.5, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.5, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
par(mar=c(9,9,0,0))
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.5, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.5, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
dim <- ncol(dst)
par(mar=c(12,12,0,0))
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.5, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.5, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
dst <- dist(data[, c(1, 4, 5)], )
dst <- data.matrix(dst)
dim <- ncol(dst)
par(mar=c(12,12,0,0))
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.7, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.7, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
dst <- dist(data[, c(1, 4, 5)], )
dst <- data.matrix(dst)
dim <- ncol(dst)
par(mar=c(12,12,0,0))
image(1:dim, 1:dim, dst, axes = FALSE, xlab="", ylab="")
axis(1, 1:dim, data[, c(1)], cex.axis = 0.5, las=3)
axis(2, 1:dim, data[, c(1)], cex.axis = 0.5, las=1)
text(expand.grid(1:dim, 1:dim), sprintf("%0.1f", dst), cex=0.6)
library(tidyverse)
library(randomForest)
setwd('/home/nicoluarte/uni/PHD/stat_course/')
d <- read.csv('mice.csv', header=TRUE) %>% as_tibble()
labs <- read.csv('mice_labels.csv', header = TRUE, sep = ',') %>% select(Behavior)
source('~/uni/PHD/stat_course/final_assignment.R')
data <- d %>% mutate(FRAME=str_replace(FRAME_PATH, "^0+(?!_)", "")) %>%
mutate(FRAME=str_replace(FRAME, "_(.*)", ""))
data <- data %>% bind_cols(labs)da
test <- randomForest(as.factor(Behavior) ~ body_x + body_y + head_sdax + head_y + tail_x + tail_y,
data = data,
ntree = 100,
mtry = 4,
importance=TRUE)
test
sum(data$Behavior == 3)
A <- list(c(data$head_x[1], data$head_y[1]))
B <- list(c(data$body_x[1], data$body_y[1]))
C <- list(c(data$tail_x[1], data$tail_y[1]))
LearnGeom::Angle(A[[1]], B[[1]], C[[1]])
View(data)
data %>% select(body_x, body_y) %>% map(~ print())
data %>% select(body_x) %>% map(~ print())
data %>% select(body_x) %>% map( print())
data %>% select(body_x) %>% map( print)
data %>% select(body_x) %>% map(c(body_x))
data %>% select(body_x, body_y) %>% pmap(sum)
data %>% select(body_x, body_y) %>% pmap(function(x, y) c(x, y))
data %>% select(body_x, body_y) %>% pmap(function(x, y) c(.x, .y))
pmap(list(x, y), sum)
x <- data %>% select(body_x)
y <- data %>% select(body_y)
pmap(list(x, y), sum)
x <- list(data %>% select(body_x))
y <- list(data %>% select(body_y))
pmap(list(x, y), sum)
View(x)
x <- data %>% select(body_x)
y <- data %>% select(body_y)
View(x)
pmap(list(x, y), sum)
list(x, y)
pmap(list(x, y), sum)
x <- data %>% select(body_x)
y <- data %>% select(body_y)
pmap(list(x, y), sum(x, y))
pmap(list(x, y), function(f, s) f + s)
pmap(list(x, y), function(f, s) c(f, s))
pmap(list(x, y), function(f, s) vector(f, s))
pmap(list(x, y), function(f, s) print(f, s))
pmap(list(x, y), function(f, s) f + s)
atan2()
p1.x <- data$body_x[1]
p1.y <- data$body_y[1]
p2.x <- data$head_x[1]
p2.y <- data$head_y[1]
p3.x <- data$tail_x[1]
p3.y <- data$tail_y[1]
atan2(p3.y - p1.y, p3.x - p1.x)
atan2(p3.y - p1.y, p3.x - p1.x) - atan2(p2.y - p1.y, p2.x - p1.x)
p1.x
p1.y
p3.y
atan2(p3.y - p1.y, p3.x - p1.x) - atan2(p2.y - p1.y, p2.x - p1.x)
source('~/uni/PHD/stat_course/final_assignment.R')
b.x <- data$body_x
b.y <- data$body_y
a.x <- data$head_x
a.y <- data$head_y
c.x <- data$tail_x
c.y <- data$tail_y
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), function(a.x, a.y, b.x, b.y, c.x, c.y) print(a.x, a.y, b.x, b.y, c.x, c.y))
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), function(a.x, a.y, b.x, b.y, c.x, c.y) sum(a.x, a.y, b.x, b.y, c.x, c.y))
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), function(a.x, a.y, b.x, b.y, c.x, c.y){
sum(a.x, a.y, b.x, b.y, c.x, c.y))
}
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
sum(a.x, a.y, b.x, b.y, c.x, c.y)
}
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle(a.x, a.y, b.x, b.y, c.x, c.y))
source('~/uni/PHD/stat_course/final_assignment.R')
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
return(sum(a.x, a.y, b.x, b.y, c.x, c.y))
}
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle(a.x, a.y, b.x, b.y, c.x, c.y))
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
return(sum(a.x, a.y, b.x, b.y, c.x, c.y))
}
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle(a.x, a.y, b.x, b.y, c.x, c.y))
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
print(a.x)
}
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle(a.x, a.y, b.x, b.y, c.x, c.y))
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
A <- c(a.x, a.y)
print(A)
}
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle(a.x, a.y, b.x, b.y, c.x, c.y))
source('~/uni/PHD/stat_course/final_assignment.R')
source('~/uni/PHD/stat_course/final_assignment.R')
source('~/uni/PHD/stat_course/final_assignment.R')
source('~/uni/PHD/stat_course/final_assignment.R')
library(tidyverse)
library(randomForest)
setwd('/home/nicoluarte/uni/PHD/stat_course/')
d <- read.csv('mice.csv', header=TRUE) %>% as_tibble()
labs <- read.csv('mice_labels.csv', header = TRUE, sep = ',') %>% select(Behavior)
data <- d %>% mutate(FRAME=str_replace(FRAME_PATH, "^0+(?!_)", "")) %>%
mutate(FRAME=str_replace(FRAME, "_(.*)", ""))
data <- data %>% bind_cols(labs)
test <- randomForest(as.factor(Behavior) ~ body_x + body_y + head_sdax + head_y + tail_x + tail_y,
data = data,
ntree = 100,
mtry = 4,
importance=TRUE)
b.x <- data$body_x
b.y <- data$body_y
a.x <- data$head_x
a.y <- data$head_y
c.x <- data$tail_x
c.y <- data$tail_y
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
A <- c(a.x, a.y)
B <- c(b.x, b.y)
C <- c(a.x, c.y)
a <- LearnGeom::Angle(A, B, C)
print(a)
}
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle(a.x, a.y, b.x, b.y, c.x, c.y))
source('~/uni/PHD/stat_course/final_assignment.R')
source('~/uni/PHD/stat_course/final_assignment.R')
test <- randomForest(as.factor(Behavior) ~ body_x + body_y + head_x + head_y + tail_x + tail_y,
data = data,
ntree = 100,
mtry = 4,
importance=TRUE)
test
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
A <- c(a.x, a.y)
B <- c(b.x, b.y)
C <- c(a.x, c.y)
a <- LearnGeom::Angle(A, B, C)
print(a)
}
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle(a.x, a.y, b.x, b.y, c.x, c.y))
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
A <- c(a.x, a.y)
B <- c(b.x, b.y)
C <- c(a.x, c.y)
a <- LearnGeom::Angle(A, B, C)
return(a)
}
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle(a.x, a.y, b.x, b.y, c.x, c.y))
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
A <- c(a.x, a.y)
B <- c(b.x, b.y)
C <- c(a.x, c.y)
a <- LearnGeom::Angle(A, B, C)
return(print(a.x))
}
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle(a.x, a.y, b.x, b.y, c.x, c.y))
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
A <- c(a.x, a.y)
B <- c(b.x, b.y)
C <- c(a.x, c.y)
a <- LearnGeom::Angle(A, B, C)
return(print(a.y))
}
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle(a.x, a.y, b.x, b.y, c.x, c.y))
source('~/uni/PHD/stat_course/final_assignment.R')
source('~/uni/PHD/stat_course/final_assignment.R')
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
A <- c(a.x, a.y)
B <- c(b.x, b.y)
C <- c(a.x, c.y)
a <- LearnGeom::Angle(A, B, C)
return(a)
}
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle(a.x, a.y, b.x, b.y, c.x, c.y))
pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle)
warnings()
angles <- pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle)
View(angles)
str(angles)
View(angles)
angles %>% unlist()
d <- angles %>% unlist()
source('~/uni/PHD/stat_course/final_assignment.R')
angles <- pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle) %>% unlist()
data %>% bind_cols(angles)
final <- data %>% bind_cols(angles)
View(final)
A <- list(c(data$head_x[1], data$head_y[1]))
B <- list(c(data$body_x[1], data$body_y[1]))
C <- list(c(data$tail_x[1], data$tail_y[1]))
LearnGeom::Angle(A[[1]], B[[1]], C[[1]])
final$...17[1]
source('~/uni/PHD/stat_course/final_assignment.R')
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
A <- c(a.x, a.y)
B <- c(b.x, b.y)
C <- c(c.x, c.y)
a <- LearnGeom::Angle(A, B, C)
return(a)
}
angles <- pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle) %>% unlist()
final <- data %>% bind_cols(angles)
View(final)
angles <- pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle) %>% unlist()
final <- data %>% mutate(ANGLES = angles)
View(final)
test <- randomForest(as.factor(Behavior) ~ body_x + body_y + head_x + head_y + tail_x + tail_y + ANGLES,
data = final,
ntree = 100,
mtry = 4,
importance=TRUE)
test
test <- randomForest(as.factor(Behavior) ~ ANGLES,
data = final,
ntree = 100,
mtry = 4,
importance=TRUE)
test
test <- randomForest(as.factor(Behavior) ~ ANGLES,
data = final,
ntree = 100,
mtry = 4,
importance=TRUE)
test <- randomForest(as.factor(Behavior) ~ ANGLES,
data = final,
ntree = 100,
importance=TRUE)
test
test <- randomForest(as.factor(Behavior) ~ body_x + body_y + head_x + head_y + tail_x + tail_y + ANGLES,
data = final,
ntree = 100,
mtry = 5,
importance=TRUE)
test
test <- randomForest(as.factor(Behavior) ~ body_x + body_y + head_x + head_y + tail_x + tail_y + ANGLES,
data = final,
ntree = 100,
mtry = 7,
importance=TRUE)
test
test <- randomForest(as.factor(Behavior) ~ body_x + body_y + head_x + head_y + tail_x + tail_y + ANGLES,
data = final,
ntree = 200,
mtry = 7,
importance=TRUE)
test
source('~/uni/PHD/stat_course/final_assignment.R')
