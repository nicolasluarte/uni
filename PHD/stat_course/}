library(reshape2)
library(caret)
library(tidyverse)
library(randomForest)
setwd('/home/nicoluarte/uni/PHD/stat_course/')
d <- read.csv('mice.csv', header=TRUE) %>% as_tibble()
labs <- read.csv('mice_labels.csv', header = TRUE, sep = ',') %>% select(Behavior)

normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}

data <- d %>% mutate(FRAME=str_replace(FRAME_PATH, "^0+(?!_)", "")) %>%
  mutate(FRAME=str_replace(FRAME, "_(.*)", ""))
data <- data %>% bind_cols(labs)
data$Behavior <- as.factor(data$Behavior)
head(data)
oneHot <- dummyVars("~ Behavior", data=data)
trans <- data.frame(predict(oneHot, newdata=data))
data <- data %>% bind_cols(trans)
mice1 <- rep("mice1", 12380)
mice2 <- rep("mice2", 10269)
m <- data.frame(mice=c(mice1, mice2))
b.x <- data$body_x
b.y <- data$body_y
a.x <- data$head_x
a.y <- data$head_y
c.x <- data$tail_x
c.y <- data$tail_y
get_angle <- function(a.x, a.y, b.x, b.y, c.x, c.y){
  A <- c(a.x, a.y)
  B <- c(b.x, b.y)
  C <- c(c.x, c.y)
  a <- LearnGeom::Angle(A, B, C)
  return(a)
}
angles <- pmap(list(a.x, a.y, b.x, b.y, c.x, c.y), get_angle) %>% unlist() %>% as_tibble() %>%
	rename(ANGLE=value)
data <- data %>% bind_cols(angles)
colnames(data)
# add lagged distances
data <- data %>% mutate(lag_body_x = lag(body_x, k=1), lag_body_y = lag(body_y, k=1))
# calculate distances
data <-data %>%
	mutate(square_x = body_x^2, square_y = body_y^2) %>%
	mutate(distances = sqrt((square_x + square_y)))

# rolling average
data %>% select(matches("Behavior.[0-9]"), ANGLE, distances) %>%
	map(function(x) zoo::rollmean(x, k=900, fill=NA, align="right")) %>%
	do.call("cbind", .) %>% as_tibble() %>%
	rename_all(funs(stringr::str_replace_all(., 'Behavior', 'SmoothBehavior'))) %>%
	rename(SmoothDistances=distances) %>%
	rename(SmoothAngle=ANGLE) -> smoothed
colnames(smoothed)
data <- data %>% bind_cols(smoothed, m)
colnames(data)
head(data)
data <- data %>% group_by(mice) %>% mutate_at(vars(matches('SmoothBehavior.[0-9]')), funs(scales::rescale))
data <- data %>% group_by(mice) %>% mutate_at(vars(matches('SmoothAngle')), funs(scales::rescale))
data <- data %>% group_by(mice) %>% mutate_at(vars(matches('SmoothDistances')), funs(scales::rescale))



meltSmoothed <- data %>%
	select(matches('SmoothBehavior.[0-9]'), FRAME, mice, SmoothAngle, SmoothDistances) %>%
	gather(key="variable", value="value", -FRAME, -mice, -SmoothAngle, -SmoothDistances)
head(meltSmoothed)
ggplot(meltSmoothed, aes(x = as.numeric(FRAME), y = value, group=1)) +
	geom_line(aes(color=variable)) +
	geom_line(aes(x = as.numeric(FRAME), y=SmoothAngle)) +
	geom_line(aes(x = as.numeric(FRAME), y=SmoothDistances), linetype="dashed") +
	geom_smooth(method="lm") +
	facet_wrap(~ variable + mice)



summary(mgcv::gam(data=data, SmoothBehavior.1 ~ s(SmoothAngle) + s(SmoothDistances)))
summary(mgcv::gam(data=data, SmoothBehavior.2 ~ s(SmoothAngle) + s(SmoothDistances)))
summary(mgcv::gam(data=data, SmoothBehavior.3 ~ s(SmoothAngle) + s(SmoothDistances)))
summary(mgcv::gam(data=data, SmoothBehavior.4 ~ s(SmoothAngle) + s(SmoothDistances)))
summary(mgcv::gam(data=data, SmoothBehavior.5 ~ s(SmoothAngle) + s(SmoothDistances)))
summary(mgcv::gam(data=data, SmoothBehavior.6 ~ s(SmoothAngle) + s(SmoothDistances)))
summary(mgcv::gam(data=data, SmoothBehavior.7 ~ s(SmoothAngle) + s(SmoothDistances)))
summary(mdl)

train_control <- trainControl(method="cv", number=10, savePredictions = TRUE)
model <- train(resp~., data=mydat, trControl=train_control, method="rpart")


hist(data$ANGLES)
colnames(data)
plot(data$ANGLES, data$FRAME)
hist(data$ANGLES)
plot(data$FRAME, data$ANGLES, pch=19)

data %>% group_by(Behavior) %>% summarise(mean=mean(ANGLES), sd=sd(ANGLES))

plot(data$Behavior, data$ANGLES)
plot(data$FRAME, data$Behavior)



p1.x <- data$body_x[1]
p1.y <- data$body_y[1]
p2.x <- data$head_x[1]
p2.y <- data$head_y[1]
p3.x <- data$tail_x[1]
p3.y <- data$tail_y[1]

sum(data$Behavior == 3)
A <- list(c(data$head_x[1], data$head_y[1]))
B <- list(c(data$body_x[1], data$body_y[1]))
C <- list(c(data$tail_x[1], data$tail_y[1]))
LearnGeom::Angle(A[[1]], B[[1]], C[[1]])
